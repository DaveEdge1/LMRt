{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "182f3f4c-5323-4418-85db-2d99a11de09a",
   "metadata": {},
   "source": [
    "# Assimilate more proxies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf48cf47-c86d-4240-ba05-f3dacf8b89cf",
   "metadata": {},
   "source": [
    "This tutorial demonstrates how to assimilate more proxies than just corals."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a854ccd3-b948-46f1-8a7f-cb63637addcd",
   "metadata": {},
   "source": [
    "## Test data preparation\n",
    "\n",
    "To go through this tutorial, please prepare test data following the steps:\n",
    "1. Download the test case named \"PAGES2k_CCSM4_GISTEMP\" with this [link](https://drive.google.com/drive/folders/1UGn-LNd_tGSjPUKa52E6ffEM-ms2VD-N?usp=sharing).\n",
    "2. Create a directory named \"testcases\" in the same directory where this notebook sits.\n",
    "3. Put the unzipped direcotry \"PAGES2k_CCSM4_GISTEMP\" into \"testcases\".\n",
    "\n",
    "Below, we first load some useful packages, including our `LMRt`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "608d8ed6-1310-4fa7-a319-7e76c6f95019",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import LMRt\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import xarray as xr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3584453-df31-401b-a51a-6a2bfcd00c10",
   "metadata": {},
   "source": [
    "## Load and modify configurations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a8fcc0-d9e4-438b-8454-d583140b94c8",
   "metadata": {},
   "source": [
    "We will first load the given example YAML file, which is set to reconstruct the temperature field only.\n",
    "We then modify specific items to set it to assimilate proxy types including:\n",
    "+ `coral.d18O`\n",
    "+ `coral.SrCa`\n",
    "+ `coral.calc`\n",
    "+ `tree.MXD`\n",
    "+ `tree.TRW`\n",
    "+ `ice.d18O`\n",
    "+ `ice.dD`\n",
    "+ `ice.melt`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5bfeeed4-4c78-4406-ae27-bf28f4cbb42c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[36mLMRt: job.load_configs() >>> loading reconstruction configurations from: ./testcases/PAGES2k_CCSM4_GISTEMP/configs.yml\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.load_configs() >>> job.configs created\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.load_configs() >>> job.configs[\"job_dirpath\"] = /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.load_configs() >>> /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon created\u001b[0m\n",
      "{'anom_period': [1951, 1980],\n",
      " 'job_dirpath': '/Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon',\n",
      " 'job_id': 'LMRt_quickstart',\n",
      " 'obs_path': {'tas': './data/obs/gistemp1200_ERSSTv4.nc'},\n",
      " 'obs_varname': {'tas': 'tempanomaly'},\n",
      " 'prior_path': {'tas': './data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.TREFHT.085001-184912.nc'},\n",
      " 'prior_regrid_ntrunc': 42,\n",
      " 'prior_season': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n",
      " 'prior_varname': {'tas': 'TREFHT'},\n",
      " 'proxy_frac': 0.75,\n",
      " 'proxydb_path': './data/proxy/pages2k_dataset.pkl',\n",
      " 'psm_calib_period': [1850, 2015],\n",
      " 'ptype_psm': {'coral.SrCa': 'linear',\n",
      "               'coral.calc': 'linear',\n",
      "               'coral.d18O': 'linear'},\n",
      " 'ptype_season': {'coral.SrCa': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n",
      "                  'coral.calc': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n",
      "                  'coral.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]},\n",
      " 'recon_loc_rad': 25000,\n",
      " 'recon_nens': 100,\n",
      " 'recon_period': [0, 2000],\n",
      " 'recon_seeds': [0,\n",
      "                 1,\n",
      "                 2,\n",
      "                 3,\n",
      "                 4,\n",
      "                 5,\n",
      "                 6,\n",
      "                 7,\n",
      "                 8,\n",
      "                 9,\n",
      "                 10,\n",
      "                 11,\n",
      "                 12,\n",
      "                 13,\n",
      "                 14,\n",
      "                 15,\n",
      "                 16,\n",
      "                 17,\n",
      "                 18,\n",
      "                 19],\n",
      " 'recon_timescale': 1,\n",
      " 'recon_vars': 'tas'}\n"
     ]
    }
   ],
   "source": [
    "job = LMRt.ReconJob()\n",
    "job.load_configs(cfg_path='./testcases/PAGES2k_CCSM4_GISTEMP/configs.yml', verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9fd3af8-ea7e-49f4-b4cc-de7cc746e16e",
   "metadata": {},
   "source": [
    "We need to modify the `ptype_psm` and `ptype_season` to include more proxy types.\n",
    "Moreover, we need to modify the `prior_path` and the `prior_varname` in the configurations to include more variables as the prior, as well as `obs_path` and `obs_varname` to include more variables of instrumental observations for the PSM calibration for `tree.TRW`.\n",
    "We also modify the `job_dirpath` to save the results to a different location."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a21a1ca9-2b8d-4bbf-ad1c-acd14500fc43",
   "metadata": {},
   "outputs": [],
   "source": [
    "job.configs['job_dirpath'] = './testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies'\n",
    "\n",
    "job.configs['ptype_psm'] = {\n",
    "    'coral.d18O': 'linear',\n",
    "    'coral.SrCa': 'linear',\n",
    "    'coral.calc': 'linear',\n",
    "    'tree.MXD': 'linear',\n",
    "    'tree.TRW': 'bilinear',  # the PSM for tree-ring width is bivariate linear regression\n",
    "    'ice.d18O': 'linear',\n",
    "    'ice.dD': 'linear',\n",
    "    'ice.melt': 'linear',\n",
    "}\n",
    "\n",
    "job.configs['ptype_season'] = {\n",
    "    'coral.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  # annual\n",
    "    'coral.SrCa': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  # annual\n",
    "    'coral.calc': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  # annual\n",
    "    'tree.MXD': [\n",
    "        [1,2,3,4,5,6,7,8,9,10,11,12],\n",
    "        [6,7,8],\n",
    "        [3,4,5,6,7,8],\n",
    "        [6,7,8,9,10,11],\n",
    "        [-12,1,2],\n",
    "        [-9,-10,-11,-12,1,2],\n",
    "        [-12,1,2,3,4,5]\n",
    "    ],  # multiple possible seasonalities\n",
    "    'tree.TRW': [\n",
    "        [1,2,3,4,5,6,7,8,9,10,11,12],\n",
    "        [6,7,8],\n",
    "        [3,4,5,6,7,8],\n",
    "        [6,7,8,9,10,11],\n",
    "        [-12,1,2],\n",
    "        [-9,-10,-11,-12,1,2],\n",
    "        [-12,1,2,3,4,5]\n",
    "    ],  # multiple possible seasonalities\n",
    "    'ice.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  # annual\n",
    "    'ice.dD': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  # annual\n",
    "    'ice.melt': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],  # annual\n",
    "}\n",
    "\n",
    "# we will need the precipitation prior for forwarding the tree.TRW PSM\n",
    "job.configs['prior_path'] = {\n",
    "    'tas': './data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.TREFHT.085001-184912.nc',\n",
    "    'pr': './data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.PRECT.085001-184912.nc',\n",
    "}\n",
    "\n",
    "# prior_varname indicates the variable names in the given netCDF files of the prior\n",
    "job.configs['prior_varname'] = {\n",
    "    'tas': 'TREFHT',\n",
    "    'pr': 'PRECT',\n",
    "}\n",
    "\n",
    "# we will need the precipitation prior for forwarding the tree.TRW PSM\n",
    "job.configs['obs_path'] = {\n",
    "    'tas': './data/obs/gistemp1200_ERSSTv4.nc',\n",
    "    'pr': './data/obs/GPCC_precip.mon.flux.1x1.v6.nc',\n",
    "}\n",
    "\n",
    "# prior_varname indicates the variable names in the given netCDF files of the obs\n",
    "job.configs['obs_varname'] = {\n",
    "    'tas': 'tempanomaly',\n",
    "    'pr': 'precip',\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2a18ba1-9791-41f0-ab7a-9f2f34f8ac79",
   "metadata": {},
   "source": [
    "## Run the reconstruction using the high-level workflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8d46869d-2b26-4f8e-8bfa-a9cf997c166e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[36mLMRt: job.load_proxydb() >>> job.configs[\"proxydb_path\"] = /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/proxy/pages2k_dataset.pkl\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.load_proxydb() >>> 692 records loaded\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.load_proxydb() >>> job.proxydb created\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.filter_proxydb() >>> filtering proxy records according to: ['coral.d18O', 'coral.SrCa', 'coral.calc', 'tree.MXD', 'tree.TRW', 'ice.d18O', 'ice.dD', 'ice.melt']\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.filter_proxydb() >>> 547 records remaining\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_proxydb() >>> seasonalizing proxy records according to: {'coral.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'coral.SrCa': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'coral.calc': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'tree.MXD': [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8], [3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11], [-12, 1, 2], [-9, -10, -11, -12, 1, 2], [-12, 1, 2, 3, 4, 5]], 'tree.TRW': [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8], [3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11], [-12, 1, 2], [-9, -10, -11, -12, 1, 2], [-12, 1, 2, 3, 4, 5]], 'ice.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'ice.dD': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'ice.melt': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.seasonalize_proxydb() >>> 547 records remaining\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.seasonalize_proxydb() >>> job.proxydb updated\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.load_prior() >>> loading model prior fields from: {'tas': '/Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.TREFHT.085001-184912.nc', 'pr': '/Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.PRECT.085001-184912.nc'}\u001b[0m\n",
      "Time axis not overlap with the reference period [1951, 1980]; use its own time period as reference [850.08, 1850.00].\n",
      "Time axis not overlap with the reference period [1951, 1980]; use its own time period as reference [850.08, 1850.00].\n",
      "\u001b[1m\u001b[30mLMRt: job.load_prior() >>> raw prior\u001b[0m\n",
      "Dataset Overview\n",
      "-----------------------\n",
      "\n",
      "     Name:  tas\n",
      "   Source:  /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.TREFHT.085001-184912.nc\n",
      "    Shape:  time:12000, lat:96, lon:144\n",
      "\n",
      "     Name:  pr\n",
      "   Source:  /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.PRECT.085001-184912.nc\n",
      "    Shape:  time:12000, lat:96, lon:144\n",
      "\u001b[1m\u001b[32mLMRt: job.load_prior() >>> job.prior created\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.load_obs() >>> loading instrumental observation fields from: {'tas': '/Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/obs/gistemp1200_ERSSTv4.nc', 'pr': '/Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/obs/GPCC_precip.mon.flux.1x1.v6.nc'}\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.load_obs() >>> job.obs created\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.calibrate_psm() >>> job.configs[\"precalc\"][\"seasonalized_prior_path\"] = /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/seasonalized_prior.pkl\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.calibrate_psm() >>> job.configs[\"precalc\"][\"seasonalized_obs_path\"] = /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/seasonalized_obs.pkl\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.calibrate_psm() >>> job.configs[\"precalc\"][\"prior_loc_path\"] = /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/prior_loc.pkl\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.calibrate_psm() >>> job.configs[\"precalc\"][\"obs_loc_path\"] = /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/obs_loc.pkl\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.calibrate_psm() >>> job.configs[\"precalc\"][\"calibed_psm_path\"] = /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/calibed_psm.pkl\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> job.configs[\"ptype_season\"] = {'coral.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'coral.SrCa': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'coral.calc': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'tree.MXD': [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8], [3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11], [-12, 1, 2], [-9, -10, -11, -12, 1, 2], [-12, 1, 2, 3, 4, 5]], 'tree.TRW': [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8], [3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11], [-12, 1, 2], [-9, -10, -11, -12, 1, 2], [-12, 1, 2, 3, 4, 5]], 'ice.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'ice.dD': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'ice.melt': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from prior with season: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from prior with season: [6, 7, 8]\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/fzhu/Github/LMRt/LMRt/utils.py:243: RuntimeWarning: Mean of empty slice\n",
      "  tmp = np.nanmean(var[inds, ...], axis=0)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from prior with season: [3, 4, 5, 6, 7, 8]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from prior with season: [6, 7, 8, 9, 10, 11]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from prior with season: [-12, 1, 2]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from prior with season: [-9, -10, -11, -12, 1, 2]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from prior with season: [-12, 1, 2, 3, 4, 5]\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Searching nearest location:   2%|▏         | 11/547 [00:00<00:04, 108.43it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[32mLMRt: job.seasonalize_ds_for_psm() >>> job.seasonalized_prior created\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Searching nearest location: 100%|██████████| 547/547 [00:04<00:00, 120.69it/s]\n",
      "Searching nearest location: 100%|██████████| 547/547 [00:04<00:00, 121.51it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[32mLMRt: job.proxydb.find_nearest_loc() >>> job.proxydb.prior_lat_idx & job.proxydb.prior_lon_idx created\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.proxydb.get_var_from_ds() >>> job.proxydb.records[pid].prior_time & job.proxydb.records[pid].prior_value created\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> job.configs[\"ptype_season\"] = {'coral.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'coral.SrCa': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'coral.calc': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'tree.MXD': [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8], [3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11], [-12, 1, 2], [-9, -10, -11, -12, 1, 2], [-12, 1, 2, 3, 4, 5]], 'tree.TRW': [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 7, 8], [3, 4, 5, 6, 7, 8], [6, 7, 8, 9, 10, 11], [-12, 1, 2], [-9, -10, -11, -12, 1, 2], [-12, 1, 2, 3, 4, 5]], 'ice.d18O': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'ice.dD': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'ice.melt': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from obs with season: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from obs with season: [6, 7, 8]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from obs with season: [3, 4, 5, 6, 7, 8]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from obs with season: [6, 7, 8, 9, 10, 11]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from obs with season: [-12, 1, 2]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from obs with season: [-9, -10, -11, -12, 1, 2]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.seasonalize_ds_for_psm() >>> Seasonalizing variables from obs with season: [-12, 1, 2, 3, 4, 5]\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Searching nearest location:   2%|▏         | 10/547 [00:00<00:05, 99.27it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[32mLMRt: job.seasonalize_ds_for_psm() >>> job.seasonalized_obs created\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Searching nearest location: 100%|██████████| 547/547 [00:05<00:00, 99.20it/s] \n",
      "Searching nearest location: 100%|██████████| 547/547 [00:22<00:00, 24.68it/s]\n",
      "Calibrating PSM:   0%|          | 0/547 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[32mLMRt: job.proxydb.find_nearest_loc() >>> job.proxydb.obs_lat_idx & job.proxydb.obs_lon_idx created\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.proxydb.get_var_from_ds() >>> job.proxydb.records[pid].obs_time & job.proxydb.records[pid].obs_value created\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.proxydb.init_psm() >>> job.proxydb.records[pid].psm initialized\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.calibrate_psm() >>> PSM calibration period: [1850, 2015]\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calibrating PSM:  48%|████▊     | 264/547 [01:31<01:07,  4.19it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of overlapped data points is 0 < 25. Skipping ...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calibrating PSM: 100%|██████████| 547/547 [03:10<00:00,  2.87it/s]\n",
      "Forwarding PSM:   4%|▍         | 23/547 [00:00<00:02, 219.89it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[32mLMRt: job.proxydb.calib_psm() >>> job.proxydb.records[pid].psm calibrated\u001b[0m\n",
      "\u001b[1m\u001b[32mLMRt: job.proxydb.calib_psm() >>> job.proxydb.calibed created\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Forwarding PSM: 100%|██████████| 547/547 [00:02<00:00, 252.65it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[32mLMRt: job.proxydb.forward_psm() >>> job.proxydb.records[pid].psm forwarded\u001b[0m\n",
      "\u001b[1m\u001b[30mLMRt: job.seasonalize_prior() >>> seasonalized prior w/ season [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\u001b[0m\n",
      "Dataset Overview\n",
      "-----------------------\n",
      "\n",
      "     Name:  tas\n",
      "   Source:  /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.TREFHT.085001-184912.nc\n",
      "    Shape:  time:1001, lat:96, lon:144\n",
      "\n",
      "     Name:  pr\n",
      "   Source:  /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.PRECT.085001-184912.nc\n",
      "    Shape:  time:1001, lat:96, lon:144\n",
      "\u001b[1m\u001b[32mLMRt: job.seasonalize_ds_for_psm() >>> job.prior updated\u001b[0m\n",
      "\u001b[1m\u001b[30mLMRt: job.regrid_prior() >>> regridded prior\u001b[0m\n",
      "Dataset Overview\n",
      "-----------------------\n",
      "\n",
      "     Name:  tas\n",
      "   Source:  /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.TREFHT.085001-184912.nc\n",
      "    Shape:  time:1001, lat:42, lon:63\n",
      "\n",
      "     Name:  pr\n",
      "   Source:  /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/prior/b.e11.BLMTRC5CN.f19_g16.001.cam.h0.PRECT.085001-184912.nc\n",
      "    Shape:  time:1001, lat:42, lon:63\n",
      "\u001b[1m\u001b[32mLMRt: job.regrid_prior() >>> job.prior updated\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.prepare() >>> Prepration data saved to: ./testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/job.pkl\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.prepare() >>> job.configs[\"precalc\"][\"prep_savepath\"] = ./testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/job.pkl\u001b[0m\n",
      "CPU times: user 7min 45s, sys: 15.1 s, total: 8min\n",
      "Wall time: 8min\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "job.prepare(verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01a9ac90-5107-4653-8c43-6cf495982ac2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[36mLMRt: job.run() >>> job.configs[\"recon_seeds\"] = [0]\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.run() >>> job.configs[\"save_settings\"] = {'compress_dict': {'zlib': True, 'least_significant_digit': 1}, 'output_geo_mean': False, 'target_lats': [], 'target_lons': [], 'output_full_ens': False, 'dtype': 32}\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.run() >>> job.configs saved to: ./testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/job_configs.yml\u001b[0m\n",
      "\u001b[1m\u001b[36mLMRt: job.run() >>> seed: 0 | max: 0\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "KF updating:   0%|          | 2/2001 [00:00<01:58, 16.88it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m\u001b[36mLMRt: job.run() >>> randomized indices for prior and proxies saved to: ./testcases/PAGES2k_CCSM4_GISTEMP/recon_more_proxies/job_r00_idx.pkl\u001b[0m\n",
      "Proxy Database Overview\n",
      "-----------------------\n",
      "     Source:        /Users/fzhu/Github/LMRt/docsrc/tutorial/testcases/PAGES2k_CCSM4_GISTEMP/data/proxy/pages2k_dataset.pkl\n",
      "       Size:        406\n",
      "Proxy types:        {'tree.TRW': 263, 'tree.MXD': 45, 'coral.calc': 5, 'coral.d18O': 49, 'coral.SrCa': 17, 'ice.d18O': 19, 'ice.dD': 7, 'ice.melt': 1}\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "KF updating:  75%|███████▌  | 1501/2001 [10:31<16:20,  1.96s/it]"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "job.run(recon_seeds=np.arange(1), verbose=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02440a5d-ddac-4637-b430-f9e219d3c7ef",
   "metadata": {},
   "source": [
    "Once done, we will get the struture below in the \"recon_top\" directory:\n",
    "```\n",
    ".\n",
    "├── calibed_psm.pkl\n",
    "├── job_configs.yml\n",
    "├── job_r00_idx.pkl\n",
    "├── job_r00_recon.nc\n",
    "├── job.pkl\n",
    "├── obs_loc.pkl\n",
    "├── prior_loc.pkl\n",
    "├── seasonalized_obs.pkl\n",
    "└── seasonalized_prior.pkl\n",
    "```\n",
    "\n",
    "We now do a quick preview of the results below.\n",
    "For more details of the visualization of the results, please move on to the tutorial regarding visualizations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf87edac-a39d-4021-b7c5-86bf54751406",
   "metadata": {},
   "source": [
    "## A quick preview of the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8189d4ea-1259-42d3-a7e8-cec524a72fb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the res object for reconstruction results\n",
    "res = LMRt.ReconRes(job.configs['job_dirpath'], verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d87c2b0f-b71d-49d5-936d-c588f2be17ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the varialbes from the recon_paths\n",
    "res.get_vars(['tas', 'nino3.4'], verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8c92f67-d0cb-4c3e-98e2-13e76ccf4e89",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot the tas field\n",
    "fig, ax = res.vars['tas'].field_list[0].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6b128afd-81d0-4368-ba1d-dcacbb7dc1fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.io import loadmat\n",
    "\n",
    "data = loadmat('./testcases/PAGES2k_CCSM4_GISTEMP/data/obs/NINO34_BC09.mat')\n",
    "syr, eyr = 1873, 2000\n",
    "nyr = eyr-syr+1\n",
    "nino34 = np.zeros(nyr)\n",
    "for i in range(nyr):\n",
    "    nino34[i] = np.mean(data['nino34'][i*12:12+i*12])\n",
    "    \n",
    "target_series = LMRt.Series(time=np.arange(syr, eyr+1), value=nino34, label='BC09')\n",
    "\n",
    "fig, ax = res.vars['nino3.4'].validate(target_series, verbose=True).plot(xlim=[1880, 2000])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
